<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golden AMI Assessment Lab on APN Equip Labs</title>
    <link>http://example.org/ami-inspector-lab/</link>
    <description>Recent content in Golden AMI Assessment Lab on APN Equip Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/ami-inspector-lab/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Solution Overview</title>
      <link>http://example.org/ami-inspector-lab/solutions_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/solutions_overview/</guid>
      <description>IMPORTANT NOTE:
For this solution to work, you must deploy all the resources in the AWS Region where you build your golden AMIs. The region must have Amazon Inspector available. For the best lab experience, please choose the Sydney Region (ap-southeast-2).
Here is an overview of how the solutions works:
 A scheduled CloudWatch Event will trigger the AWS Lambda function called StartContinuousAssessment every morning at 6 AM. This essentially acts like a cron job (on Linux) or a scheduled task (on Windows) that will run on a regular basis.</description>
    </item>
    
    <item>
      <title>2. Tagging the Golden AMI</title>
      <link>http://example.org/ami-inspector-lab/tag_golden_ami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/tag_golden_ami/</guid>
      <description>Before we begin, the first thing we need to have is a Golden AMI, the subject of our continuous assessment solution. To do this, you can create your own Golden AMI from an EC2 instance as described in this guide. Alternatively, to keep it simple, you can choose to use an Amazon Public AMI as your Golden AMI. But please note, AWS may retract access to the public AMI in the future, and should this happen, it will no longer be accessible to you.</description>
    </item>
    
    <item>
      <title>3. Create Golden AMI metadata</title>
      <link>http://example.org/ami-inspector-lab/create_golden_ami_metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_golden_ami_metadata/</guid>
      <description>Now that we have tagged our Golden AMI for context, the next thing we need to do is to create metadata containing information about our Golden AMI, so that our solution knows which Golden AMIs they should regularly inspect.
In this part of the lab, we will construct metadata containing information about our Golden AMI and store it in the AWS Systems Manager Parameter Store. The metadata will be specified in JSON format and will contain the AMI ID of the Golden AMI that we tagged in the previous step, the Instance Type of the temporary EC2 instance we will launch to use as medium for our inspection, and the User Data instructions needed to bootstrap Amazon Inspector agent, so that Amazon Inspector can run the security posture assessment against the EC2 instance.</description>
    </item>
    
    <item>
      <title>4. Create IAM roles for Lambda</title>
      <link>http://example.org/ami-inspector-lab/create_exec_role_for_contasses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_exec_role_for_contasses/</guid>
      <description>In AWS, security is the highest priority. By working directly with CloudFormation, you will discover layers of security constructs that you can customize to secure your resources. One of these is the IAM role. For cross service interactions, AWS will leverage security services to create isolation and security boundaries for the actions executed.
In this part of the Lab we will be defining an IAM role that we will attach to our AWS Lambda function to specify permissions for the Lambda function.</description>
    </item>
    
    <item>
      <title>5. Create SNS Topic </title>
      <link>http://example.org/ami-inspector-lab/create_snstopic_assesmentcomplete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_snstopic_assesmentcomplete/</guid>
      <description>Now that we have our IAM role defined in our stack, we shall move on to the next resources. In this solution we will be using a number of SNS Topics. These topics will be used to notify our users about the state of the Golden AMI inspection. They will also be used to decouple the StartContinousAssesment and AnalyzeInspectorFindings AWS Lambda functions. With an SNS Topic IAM Policy, you can define which AWS service is allowed to publish to the SNS topic.</description>
    </item>
    
    <item>
      <title>6. Create Lambda Functions</title>
      <link>http://example.org/ami-inspector-lab/create_continuousassess_lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_continuousassess_lambda/</guid>
      <description>All right, now for the exciting part! In this section of the lab, we will walk through how to construct and package AWS Lambda Functions and attach them to the IAM roles we created in the previous step. We will be creating 2 Lambda Functions StartContinuousAssesment and AnalyzeInspectorFindings. We will be providing references to the SNS Topics you created in the previous steps to each of these Lambda functions through an environment variable.</description>
    </item>
    
    <item>
      <title>7. Subscribe Lambda to SNS Topic</title>
      <link>http://example.org/ami-inspector-lab/connect_analyzerlambda_sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/connect_analyzerlambda_sns/</guid>
      <description>Now that we have created our Lambda functions the next thing to do is to connect the ContinuousAssesmentCompleteTopic SNS Topic to the AnalyzeInspectorFindings Lambda function, leveraging the subscription mechanism. This is to allow AnalyzeInspectorFindings to be triggered once Amazon Inspector completes the inspection and to send the notification message to users.
IMPORTANT NOTE:
In the following steps you will need to construct your CloudFormation template in YAML format. YAML allows you to put comments in the template by placing a # in front of the comment line.</description>
    </item>
    
    <item>
      <title>8. Test Assessment</title>
      <link>http://example.org/ami-inspector-lab/test_assesment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/test_assesment/</guid>
      <description>The main part of our solution is now complete! In this section we will test the execution by manually invoking the StartContinuousAssessment Lambda function. This will then kick off the Golden AMI assessment process on the AMI ID we specified in our metadata, and you should see the solution in full effect.
Manually Start Golden AMI vulnerability assessment  Sign in to the AWS Management Console and choose Lambda in the Services menu.</description>
    </item>
    
    <item>
      <title>9. Configure CloudWatch Event Rule</title>
      <link>http://example.org/ami-inspector-lab/scheduling_the_continuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/scheduling_the_continuation/</guid>
      <description>This will be the last piece of the puzzle! In this section of the Lab we will be extending our CloudFormation template to add a CloudWatch Events scheduler, which will allow Lambda functions to regularly assess Golden AMIs.
IMPORTANT NOTE:
In the following steps you will need to construct your CloudFormation template in YAML format. YAML allows you to put comments in the template by placing a # in front of the comment line.</description>
    </item>
    
  </channel>
</rss>