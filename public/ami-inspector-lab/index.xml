<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golden AMI Assessment Lab on APN Equip Labs</title>
    <link>http://example.org/ami-inspector-lab/</link>
    <description>Recent content in Golden AMI Assessment Lab on APN Equip Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://example.org/ami-inspector-lab/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1. Solutions Overview</title>
      <link>http://example.org/ami-inspector-lab/solutions_overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/solutions_overview/</guid>
      <description>IMPORTANT NOTE:
For this solution to work, you must deploy all resouces AWS Region where you build your golden AMIs. This region must have Amazon Inspector available. For best lab experience, please choose Sydney Region ( ap-southeast-2).
Here an overview on how our solutions works:
 A scheduled CloudWatch Events will trigger the AWS Lambda function called StartContinuousAssessment every morning at 6 AM. This will essentially acts like your cron task (Linux) or scheduled task (Windows) that will executes on a regular basis.</description>
    </item>
    
    <item>
      <title>2. Tagging the Golden AMI</title>
      <link>http://example.org/ami-inspector-lab/tag_golden_ami/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/tag_golden_ami/</guid>
      <description>Before we begin, the first thing we need have is a Golden AMI. the subject of our Continous Assessment solution. To do this, you can create your own Golden AMI from EC2 instance as discribed in this Guide. Alternatively, to keep it simple, you can choose to use Amazon Public AMI as your Golden AMI. But please note that AWS may retract access to the AMI in the future, and when this happen, you wont have access to it anymore.</description>
    </item>
    
    <item>
      <title>3. Create Golden AMI metadata</title>
      <link>http://example.org/ami-inspector-lab/create_golden_ami_metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_golden_ami_metadata/</guid>
      <description>Now that we have tagged our Golden AMI for context, the next thing we need to do is to create a metadata containing information about our Golden AMI, so that our solution knows which GoldenAMI they should regularly inspect.
In this part of the lab, we will construct a metadata containing information of our Golden AMI metadata and store it in AWS Systems Manager Parameter Store. The metadata will be specified in JSON format and will contain th Ami-Id of the Golden AMI id that we tagged in the previous step, the InstanceType of the temporary EC2 instance we will launch to use as medium for our inspection, the UserData instructions, used to bootstrap Amazon Inspector agent to the temporary EC2 instance, so that Amazon Inspector can run the assesment towards the EC2.</description>
    </item>
    
    <item>
      <title>4. Create IAM roles for Lambda</title>
      <link>http://example.org/ami-inspector-lab/create_exec_role_for_contasses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_exec_role_for_contasses/</guid>
      <description>In AWS Security is at highest priority, through working directly with CloudFormation, you will discover layers of security construct that you could customize to secure your resource. One of it is IAM role, for cross service interactions AWS will levarage security services to create isolation and security boundaries on the service executed.
In this part of the Lab we will be defining an IAM role that we will attach to our AWS Lambda function and specify permissions for the Lambda function to access only the services and resource we allow it to.</description>
    </item>
    
    <item>
      <title>5. Create SNS Topic </title>
      <link>http://example.org/ami-inspector-lab/create_snstopic_assesmentcomplete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_snstopic_assesmentcomplete/</guid>
      <description>Now that we have our IAM role defined in our Stack, we shall move on to our next resources. In this solutin we will be levaraging a number of SNS Topics. These topics will be used to notify our users about the state if the Golden AMI inspection, as well as act as a decoupling structure to connect our StartContinousAssesment function and AnalyzeInspectorFindings Function. With SNS Topic Policy, you can define which service on AWS is allowed to publish to the SNS topic.</description>
    </item>
    
    <item>
      <title>6. Create Lambda Functions</title>
      <link>http://example.org/ami-inspector-lab/create_continuousassess_lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/create_continuousassess_lambda/</guid>
      <description>Alright, now for the meaty part ! In this part of the lab, we will walk through how to construct / package AWS Lambda Function and attach it to the IAM roles we created in previous step. We will be creating 2 Lambda Functions StartContinuousAssesment &amp;amp; AnalyzeInspectorFindings Each of this Lambda Functions will also have a connection to SNS Topics we created in previous steps through a Lambda Environment variable we defined in the function.</description>
    </item>
    
    <item>
      <title>7. Connect Analyzer to Topic</title>
      <link>http://example.org/ami-inspector-lab/connect_analyzerlambda_sns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/connect_analyzerlambda_sns/</guid>
      <description>Now that we have created our Lambda Functions the next thing to do is to connect the ContinuousAssesmentCompleteTopic SNS Topic to the AnalyzeInspectorFindings Lambda function, levaraging the subscribtion mechanism. This is to basically allow AnalyzeInspectorFindings to be triggered once Amazon Inspector completes inspection and send the message notification
 Create Lambda Permission to allow SNS service to invoke..
IMPORTANT NOTE:
In the following steps you will need to construct your CloudFormation template in YAML format.</description>
    </item>
    
    <item>
      <title>8. Test Assesment</title>
      <link>http://example.org/ami-inspector-lab/test_assesment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/test_assesment/</guid>
      <description>As I mentioned before, the main part of our solution is done ! In this section we will test the execution of our solution by passing in manual invocation to the StartContinuousAssessment Lambda Function. In this test, you trigger a security assessment and monitor it.
 To start golden AMI vulnerability assessments:
 Sign in to the AWS Management Console and choose Lambda in the Services menu. Choose Functions. In the Functions pane, choose the StartContinuousAssessment function.</description>
    </item>
    
    <item>
      <title>9. Configure CloudWatch events</title>
      <link>http://example.org/ami-inspector-lab/scheduling_the_continuation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/ami-inspector-lab/scheduling_the_continuation/</guid>
      <description>This will be the last piece of the puzzle. In this part of the Lab we will be extending our CloudFormation template to add a CloudWatch Events scheduler to allow our Lambda Functions to continusously asses Golden AMIs.
 Set up a CloudWatch Events rule for triggering continuous golden AMI vulnerability assessments
IMPORTANT NOTE:
In the following steps you will need to construct your CloudFormation template in YAML format. YAML format allows you to put comments in the template by placing in # in front of the line, so it&amp;rsquo;s quite handy.</description>
    </item>
    
  </channel>
</rss>