Resources:

  # AMI Parameters
  AMIParameters:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "ContinuousAssessmentIn"
      Type: "String"
      Value: "[{ \"instanceType\": \"t2.large\",\"ami-id\": \"ami-0e2b940b603bf07f3\", \"userData\": \"#!/bin/bash \\n wget https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install;bash install;/etc/init.d/awsagent start\" }]"
      Description: "Continuous golden AMI vulnerability assessment process metadata."

  # Lambda Executon Role
  StartContinuousAssessmentLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          - "arn:aws:iam::aws:policy/AmazonInspectorFullAccess"
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      Path: "/"
      Policies:
          - 
            PolicyName: "root"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                  - 
                    Sid: "StartContinuousAssessmentLambdaPolicyStmt"
                    Effect: "Allow"
                    Action: 
                      - "ssm:GetParameter"
                      - "ec2:DescribeImages"
                      - "ec2:RunInstances"
                      - "ec2:CreateTags"
                    Resource: "*"

  #Lambda Function
  StartContinuousAssessmentLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role:
        !GetAtt StartContinuousAssessmentLambdaRole.Arn
      Code:
        ZipFile: |
            import json
            import urllib.parse
            import boto3
            import time
            import os
            def lambda_handler(event, context):
                AMIsParamName = event['AMIsParamName'];
                region=os.environ['AWS_DEFAULT_REGION']
                ec2 = boto3.client('ec2',region)
                ssm = boto3.client('ssm',region)
                inspector = boto3.client('inspector',region)
                AmiJson =  ssm.get_parameter(Name=AMIsParamName)['Parameter']['Value']
                print(AmiJson)
                items = json.loads(AmiJson)
                for entry in items:
                    images= ec2.describe_images(ImageIds=[entry['ami-id']],DryRun=False)
                    tags = images['Images'][0]['Tags']
                    tags.append({'Key': 'continuous-assessment-instance', 'Value': 'true'})
                    ec2.run_instances(ImageId=entry['ami-id'],InstanceType=entry['instanceType'],UserData=entry['userData'],DryRun=False,MaxCount=1,MinCount=1,TagSpecifications=[{'ResourceType': 'instance','Tags': tags}])
                assessmentTemplateArn='';
                rules = inspector.list_rules_packages();
                
                millis = int(round(time.time() * 1000))
                existingTemplates = inspector.list_assessment_templates(filter={'namePattern': 'ContinuousAssessment'})
                print('Total templates found:'+str(len(existingTemplates['assessmentTemplateArns'])))
                if len(existingTemplates['assessmentTemplateArns'])==0:
                    resGroup = inspector.create_resource_group(resourceGroupTags=[{'key': 'continuous-assessment-instance','value': 'true'}])
                    target = inspector.create_assessment_target(assessmentTargetName='ContinuousAssessment',resourceGroupArn=resGroup['resourceGroupArn'])
                    template = inspector.create_assessment_template(assessmentTargetArn=target['assessmentTargetArn'],assessmentTemplateName='ContinuousAssessment', durationInSeconds=3600,rulesPackageArns=rules['rulesPackageArns'])
                    assessmentTemplateArn=template['assessmentTemplateArn']
                    response = inspector.subscribe_to_event(event='ASSESSMENT_RUN_COMPLETED',resourceArn=template['assessmentTemplateArn'],topicArn=os.environ['AssesmentCompleteTopicArn']) 
                    print('Template Created:'+template['assessmentTemplateArn'])
                else:
                    assessmentTemplateArn=existingTemplates.get('assessmentTemplateArns')[0]
                time.sleep(240)
                run = inspector.start_assessment_run(assessmentTemplateArn=assessmentTemplateArn,assessmentRunName='ContinuousAssessment'+'-'+str(millis))
                return 'Done'
      Runtime: python3.6 
      Timeout: 300
      Handler: index.lambda_handler
      MemorySize: 512
      Environment:
        Variables:
          AssesmentCompleteTopicArn: !Ref ContinuousAssessmentCompleteTopic


  # Send to SNS Topic.
  ContinuousAssessmentCompleteTopic:
    Type: "AWS::SNS::Topic" 

  ContinuousAssessmentCompleteTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: "MyTopicPolicy"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "My-statement-id"
            Effect: "Allow"
            Principal: 
              Service: "inspector.amazonaws.com"
            Action: "sns:Publish"
            Resource: "*"
      Topics:
        - !Ref "ContinuousAssessmentCompleteTopic"

  AnalyzeInspectorFindingsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
              Action:
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        -
          PolicyName: "AnalyzeInspectorFindingsLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - 
                Sid: "AnalyzeInspectorFindingsLambdaPolicyStmt"
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                  - "ec2:DescribeInstances"
                  - "ec2:TerminateInstances"
                  - "inspector:AddAttributesToFindings"
                  - "inspector:DescribeFindings"
                  - "inspector:ListFindings"
                Resource: "*"
    
  AnalyzeInspectorFindingsLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Role: !GetAtt AnalyzeInspectorFindingsLambdaRole.Arn
      Code:
        ZipFile: |
            import json 
            import os
            import boto3
            import collections
            import ast
            def lambda_handler(event, context): 
                message = event['Records'][0]['Sns']['Message'] 
                jsonVal = json.loads(message);
                assessmentArn =jsonVal['run']  
                region=os.environ['AWS_DEFAULT_REGION']
                ec2 = boto3.client('ec2',region) 
                sns = boto3.client('sns',region) 
                inspector = boto3.client('inspector',region) 
                findingArns = inspector.list_findings(assessmentRunArns=[jsonVal['run']],maxResults=5000)
                aggregateData={}
                for findingArn in findingArns['findingArns']:
                    finding = inspector.describe_findings(findingArns=[findingArn]) 
                    for result in finding['findings']: 
                        instanceId =result['assetAttributes']['agentId']
                        severity =result['severity']
                        cveName=result['id']
                        if not (instanceId) in aggregateData:
                            aggregateData[instanceId]={}
                            aggregateData[instanceId]['findings']={}
                            aggregateData[instanceId]['findings'][severity]=0
                            instance=ec2.describe_instances(InstanceIds=[instanceId]);
                            tagsStr=str(instance['Reservations'][0]['Instances'][0]['Tags']) 
                            tagsStr =tagsStr.replace('Key','key').replace('Value','value')  
                            aggregateData[instanceId]['tags']= ast.literal_eval(tagsStr)
                        elif not (severity) in aggregateData[instanceId]['findings']:
                            aggregateData[instanceId]['findings'][severity]=0
                        aggregateData[instanceId]['findings'][severity]=aggregateData[instanceId]['findings'][severity]+1; 
                        inspector.add_attributes_to_findings(findingArns=[result['arn']],attributes=aggregateData[instanceId]['tags'])
                        print(findingArns=[result['arn']])
                        print(attributes=aggregateData[instanceId]['tags'])
                tagsList=[]
                for key  in aggregateData: 
                    outputJson=[] 
                    for tag in aggregateData[key]['tags']:
                        if tag['key'] != 'continuous-assessment-instance':
                            outputJson.append("\""+tag['key']+"\""+":"+"\""+tag['value']+"\"")
                    for sev in aggregateData[key]['findings']:
                        outputJson.append("\"Finding-Severity-"+sev+"-Count\""+":"+"\""+str(aggregateData[key]['findings'][sev])+"\"")
                    outputJson.sort()
                    print(outputJson)
                    tagsList.append('{'+', '.join(outputJson)+'}')
                    print('Terminating:'+key)
                    ec2.terminate_instances(InstanceIds=[key],DryRun=False)
                sns.publish(TopicArn=os.environ['ContinuousAssessmentResultsTopic'],Message='['+', '.join(tagsList)+']')
                return jsonVal['run']
      Runtime: "python3.6" 
      Timeout: 300
      Handler: "index.lambda_handler"
      MemorySize: 512
      Environment:
        Variables:
          ContinuousAssessmentResultsTopic: !Ref ContinuousAssessmentResultsTopic

  ContinuousAssessmentResultsTopic:
    Type: "AWS::SNS::Topic" 

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref "ContinuousAssessmentCompleteTopic"
      FunctionName: !GetAtt AnalyzeInspectorFindingsLambdaFunction.Arn
